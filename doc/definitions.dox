//  Copyright (C) 2001 Roberto Bagnara <bagnara@cs.unipr.it>
//
//  This document describes the Parma University's Recurrence Relation
//  Solver (PURRS).
//
//  Permission is granted to copy, distribute and/or modify this document
//  under the terms of the GNU Free Documentation License, Version 1.1 or
//  any later version published by the Free Software Foundation; with no
//  Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
//  Texts.
//
//  The PURRS is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the
//  Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  The PURRS is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
//  for more details.
//
//  For the most up-to-date information see the Parma University's
//  Recurrence Relation Solver
//  site: http://www.cs.unipr.it/purrs/

/*!
  \defgroup PURRS_Library The Library
  The core implementation of the Parma University's Recurrence
  Relation Solver is written in C++. See Namespace, Hierarchical
  and Compound indexes for additional information.
*/



/*! \mainpage Recurrence Relations and the PURRS
\section preamble A C++ library for the (possibly approximate) solution of recurrence relations.

FIXME: Abstract to be written.

<B>Preliminaries</B>

We will use the following conventions:
we denote by \f$ \Nset \f$ the set of nonnegative integers, so that
\f$ 0 \in \Nset \f$; the value of an empty sum is \f$ 0 \f$.

We let \f$ \Cset[n] \f$ denote the <EM>ring of polynomials</EM> in the
<EM>indeterminate</EM> \f$ n \f$ with coefficients in \f$ \Cset \f$.
This is the smallest set (with respect to inclusion) that contains the
set of complex numbers \f$ \Cset \f$, the indeterminate \f$ n \notin \Cset \f$,
and is closed with respect to addition and multiplication.
The rings \f$ \Zset[n] \f$, \f$ \Qset[n] \f$ and \f$ \Rset[n] \f$ are
defined similarly.
Let \f$ p \in \Cset[n] \setminus \{ 0 \} \f$:
we denote by \f$ \deg(p) \f$ the <EM>degree</EM> of the polynomial \f$ p \f$
and by \f$ \lead(p) \f$ its <EM>leading coefficient</EM>, that is,
the coefficient of the monomial \f$ n^{\deg(p)} \f$.
We also let \f$ \coeff_j(p) \f$ denote the coefficient of the monomial
of degree \f$ j \f$ of the polynomial \f$ p \f$.
With this notation, \f$ \lead(p) = \coeff_{\deg(p)}(p) \f$.

We are particularly interested in deriving, when possible,
mathematical formulas that are <EM>in closed form</EM>, a concept
that we define informally as follows:
a mathematical expression denoting a function \f$ \fund{f}{\Nset}{\Cset} \f$
is said to be in <EM>elementary closed form</EM> if it is,
<EM>syntactically</EM>, a linear combination of a fixed number, \f$ r \f$,
say, of products of polynomials in \f$ \Cset[n] \f$ and (complex)
exponentials.
The number \f$ r \f$ must be an absolute constant, that is, it must be
independent of all variables and parameters of the problem.
As an example, the left hand side of the identity
\f[
  \sum_{k=0}^n \binom nk
  =
  2^n
\f]
is not in closed form, while the right hand side is.

Generally speaking, we focus on effectively computable methods
that can constitute the basis of practical, efficient algorithms.
As a consequence, very often we refer to <EM>syntax</EM>
instead of <EM>semantics</EM>.
Moreover, in an attempt to keep the discussion more fluid,
we do that implicitly.
Thus, when we say ``\f$ p \f$ is a polynomial'' we actually mean
``\f$ p \f$ is an expression that, syntactically, is a polynomial''
or
``\f$ p \f$ is, syntactically, of the form
  \f$ a_0\lambda^k + a_1\lambda^{k-1} + \cdots + a_{k-1}\lambda + a_k \f$
  where \f$ \dots \f$''.

We prefer to use the term ``recurrence relations,'' but in the
literature it is also possible to encounter the term
<EM>difference equations</EM>.
The latter is mainly used in a mathematical context, in order to give
prominence to the tie with the differential equations.
In fact, difference equations can be considered the discrete analogue
of differential equations, and there exists a collection of
mathematical tools, called <EM>difference calculus</EM>, which is quite
similar to <EM>differential calculus</EM>.



\section introduction An Introduction to Recurrence Relations

<B>Recurrence relation</B>

Given a sequence \f$ (x_n)_{n \in \Nset} \f$ of complex numbers, we say
that it satisfies the <EM>recurrence relation</EM> (or, more briefly,
the <EM>recurrence</EM>) \f$ F_n \f$ if
\f[
  F_n(n, x_n, x_{n-1}, \dots, x_1, x_0) = 0.
\f]
Note that, in general, we allow \f$ F_n \f$ to depend on \f$ n \f$:
in the definition above, in fact, its arity is \f$ n+2 \f$.
Here we want to include the possibility that, say,
\f$ F_n(n, x_n, x_{n-1}, \dots, x_1, x_0) = \sum_{k=0}^n x_k \f$.

\anchor normal_form
<B>Normal form of a recurrence</B>

We say that the recurrence \f$ F_n \f$ is in its <EM>normal form</EM>
if there exists a function \f$ G_n \f$ such that
\f[
  F_n(n, x_n, x_{n-1}, \dots, x_1, x_0)
  =
  x_n - G_n(n, x_{n-1}, \dots, x_1, x_0).
\f]
In this case, we also call normal form of the recurrence the equivalent
statement
\f[
  x_n
  =
  G_n(n, x_{n-1}, \dots, x_1, x_0).
\f]

\anchor order
<B>Order of a recurrence</B>

If there exists a <EM>fixed</EM> positive integer \f$ k \f$ and a function
\f$ H_n \f$ of arity \f$ k+1 \f$ such that for \f$ n \ge k \f$
\f[
  G_n(n, x_{n-1}, \dots, x_1, x_0)
  =
  H_n(n, x_{n-1}, \dots, x_{n-k}),
\f]
we say that the recurrence in normal form has <EM>order</EM> (at most)
\f$ k \f$.
We take the <EM>smallest</EM> possible value of \f$ k \f$ as the order
of the recurrence.
If no such \f$ k \f$ exists, then we do not assign an order to the
recurrence.

In the following section we will consider the different types of
recurrences that the system is able to handle.



\section linear_finite_order Linear Recurrences of Finite Order

A <EM>linear recurrence of order \f$ k \f$</EM> is a recurrence of the form
\f[
   x_n
   =
   \alpha_1(n) x_{n-1} + \alpha_2(n) x_{n-2} + \cdots
	+ \alpha_k(n) x_{n-k} + p(n),
\f]
for \f$ n \geq k \f$.
We implicitly assume that \f$ \alpha_k(n) \neq 0 \f$ "syntactically",
for otherwise the order would be smaller.
The <EM>coefficients</EM> \f$ \alpha_j(n) \f$, for \f$ j = 1, \dots, k \f$,
are real or complex numbers.
The function \f$ p \f$ is defined on \f$ \Nset \cap [k, +\infty) \f$,
and is the <EM>non-homogeneous part</EM> of the recurrence.
If \f$ p \doteq 0 \f$ (that is, \f$ p \f$ vanishes identically from a
syntactical point of view), we say that the recurrence is
<EM>homogeneous</EM>.
Every recurrence is given with a set of \f$ k \f$
\anchor initial_conditions
<EM>initial conditions</EM> \f$ x_0 \f$, \f$ x_1 \f$, \f$ \dots \f$,
\f$ x_{k-1} \f$, which we assume to be known: the initial conditions
allow to uniquely identify the recurrence.
The user may define some or all of the initial conditions: those that
have not been defined will appear symbolically in the explicit form of
the solution, and will be called <EM>symbolic initial conditions</EM>.

If the coefficients \f$ \alpha_j(n) \f$ are constant with respect to the
variable \f$ n \f$, for \f$ j = 1, \dots, k \f$, then the recurrence
is called with <EM>constant coefficients</EM>; otherwise the
recurrence is called with <EM>variable coefficients</EM>.

<B>Linear Recurrences of Finite Order with Costant Coefficients</B>

bla bla

<B>Linear Recurrences of Finite Order with Variable Coefficients</B>

bla bla



\section weighted_average ``Weighted-Average'' Recurrences

We consider here a rather different set of recurrences from the previous
ones, where we allow \f$ x_n \f$ to depend on <EM>all</EM> the previous
values of \f$ x \f$, and not only the last \f$ k \f$ of them, \f$ k \f$
being a fixed positive integer.

We call <EM>``Weighted-Average''</EM> recurrence a recurrence in the
form \anchor general_weighted_average
\f[
  x_n = f(n) \sum_{k=0}^{n-1} x_k + g(n),
\f]
where \f$ \fund{f,g}{\Nset}{\Cset} \f$, and \f$ f \f$ never vanishes.
\f$ g(n) \f$ is the <EM>non-homogeneous part</EM> of the recurrence;
If \f$ g \doteq 0 \f$ (that is, \f$ g \f$ vanishes identically from a
syntactical point of view), we say that the recurrence is
<EM>homogeneous</EM>.
If \f$ f_k(n) \f$ is constant for each \f$ k = 0, \dotsc, n-1 \f$, then
the recurrence is called with <EM>constant coefficients</EM>; otherwise
the recurrence is called with <EM>variable coefficients</EM>.

Sometimes we say that this type of recurrence is of <EM>infinite order</EM>.

We show how to transform any recurrence of this form into a first order
recurrence with variable coefficients.
In fact, for \f$ n \geq 2 \f$ the sequence \f$ x \f$ also satisfies
\f[
  x_n = \alpha(n) x_{n-1} + \beta(n),
\f]
where
\f[
  \alpha(n) \defeq \frac{f(n)}{f(n-1)} (1+f(n-1))
	      \qquad \text{and} \qquad \beta(n)
            \defeq f(n) \left(
	                  \frac{g(n)}{f(n)} - \frac{g(n-1)}{f(n-1)}
	                \right),
\f]
(for the proof see ...).

For this transformation is essential that the ``weight'' \f$ f(n) \f$ be
the same for all values of \f$ k \f$.

In the actual practice, PURRS creates a new recurrence \f$ z_n \f$ such
that \f$ z_n = x_{n+1} \f$:
\f[
  \begin{cases}
    z_0 = x_1 \\
    z_n = \alpha(n + 1) z_n + \beta(n + 1). \\
  \end{cases}
\f]
Once this has been solved, PURRS computes \f$ x_n = z_{n-1} \f$ and
\anchor initial_condition
then lets \f$ x_1 = f(1) x_0 + g(1) \f$, using the
\ref general_weighted_average "general formula for the weighted average recurrence" with \f$ n = 1 \f$.
It is quite important to remark that the closed formula for \f$ x_n \f$ is
guaranteed to hold for \f$ n \ge 1 \f$ only.



\section non_linear Non Linear Recurrences of Finite Order

bla bla



\section generalized_recurrence Generalized Recurrences

The <EM>generalized recurrences</EM> are often called
<EM>functional equations</EM> since, strictly speaking, they do not
fall into the standard classes of recurrences treated in the previous
sections.
A typical example of this is
\f[
  x_n = \alpha x_{n / \beta} + d n^e.
\f]
Here and in the sequel, we tacitly understand \f$ n / \beta \f$ as
\f$ \bigl[ n / \beta \bigr] \f$, and write \f$ x(n / \beta) \f$ in place
of \f$ x_{n/\beta} \f$, as it would be customary when dealing with sequences,
because the former is easier to read.
The above quation requires \f$ \beta - 1 \f$ initial conditions
\f$ x(n) \f$ for \f$ 1 \leq n < \beta \f$, if \f$ \beta \f$ is a positive
integer.
Notice that the relation specified by such a functional equation
between its values at different arguments is much more complicated
than in the cases of the proper recurrences considered in the previous
sections.

Functional equations are extremely important in complexity analysis,
since they appear naturally in the analysis of <EM>divide-et-impera</EM>
algorithms.
For this kind of applications we can assume and exploit the fact that
\f$ x_n \f$ is monotonically increasing: a frequent functional equations
that we consider is
\f[
  x(n) = \alpha x \Bigl( \frac n\beta \Bigr) + g(n),
\f]
where \f$ \alpha > 0 \f$, \f$ \beta \in \Nset \setminus \{0 \f$, \f$ 1 \} \f$,
and \f$ \fund{g}{\Nset \setminus \{ 0 \}}{\Rset} \f$ is a non-negative,
non-decreasing function.

The (approximate) solution of divide-et-impera recurrences
depends upon the so-called ``Master Theorems''.
It is almost always impossible to find a simple, closed formula
valid for all positive integers, and the master theorems give
upper and lower bounds for the solutions that contain one or more
unspecified constants.
In contrast, PURRS tries to give numerically explicit upper and lower
bounds for the solutions (bounds that contain explicit constants that
can be effectively computed as functions of the parameters involved.
In the only occasion when one such constant takes the form of an
infinite series we give a simple sharp bound for its value, in terms
of standard mathematical functions.)
Such bounds, which are always of the correct order of magnitude, are
obtained under as mild assumptions as possible on the non-homogeneous
part.

We call <EM>rank</EM> of a functional equation the number of terms
of the form \f$ \alpha x \Bigl( \frac n\beta \Bigr) \f$, where \f$ \beta \f$
is an integer larger than one.

<B>Functional equation of rank \f$ 1 \f$</B>

bla bla

<B>Functional equation of rank \f$ k \f$, \f$ k > 1 \f$</B>
 
bla bla

*/
