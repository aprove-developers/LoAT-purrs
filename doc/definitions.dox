//  Copyright (C) 2001 Roberto Bagnara <bagnara@cs.unipr.it>
//
//  This document describes the Parma University's Recurrence Relation
//  Solver (PURRS).
//
//  Permission is granted to copy, distribute and/or modify this document
//  under the terms of the GNU Free Documentation License, Version 1.1 or
//  any later version published by the Free Software Foundation; with no
//  Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
//  Texts.
//
//  The PURRS is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by the
//  Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  The PURRS is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
//  for more details.
//
//  For the most up-to-date information see the Parma University's
//  Recurrence Relation Solver
//  site: http://www.cs.unipr.it/purrs/

/*!
  \defgroup PURRS_Library The Library
  The core implementation of the Parma University's Recurrence
  Relation Solver is written in C++. See Namespace, Hierarchical
  and Compound indexes for additional information.
*/



/*! \mainpage Recurrence Relations and the PURRS
\section preamble A C++ library for the (possibly approximate) solution of recurrence relations.

FIXME: Abstract to be written.

<B>Preliminaries</B>

We will use the following conventions:
we denote by \f$ \Nset \f$ the set of nonnegative integers, so that
\f$ 0 \in \Nset \f$; the value of an empty sum is \f$ 0 \f$.

We let \f$ \Cset[n] \f$ denote the <EM>ring of polynomials</EM> in the
<EM>indeterminate</EM> \f$ n \f$ with coefficients in \f$ \Cset \f$.
This is the smallest set (with respect to inclusion) that contains the
set of complex numbers \f$ \Cset \f$, the indeterminate \f$ n \notin \Cset \f$,
and is closed with respect to addition and multiplication.
The rings \f$ \Zset[n] \f$, \f$ \Qset[n] \f$ and \f$ \Rset[n] \f$ are
defined similarly.
Let \f$ p \in \Cset[n] \setminus \{ 0 \} \f$:
we denote by \f$ \deg(p) \f$ the <EM>degree</EM> of the polynomial \f$ p \f$
and by \f$ \lead(p) \f$ its <EM>leading coefficient</EM>, that is,
the coefficient of the monomial \f$ n^{\deg(p)} \f$.
We also let \f$ \coeff_j(p) \f$ denote the coefficient of the monomial
of degree \f$ j \f$ of the polynomial \f$ p \f$.
With this notation, \f$ \lead(p) = \coeff_{\deg(p)}(p) \f$.

We are particularly interested in deriving, when possible,
mathematical formulas that are <EM>in closed form</EM>, a concept
that we define informally as follows:
a mathematical expression denoting a function \f$ \fund{f}{\Nset}{\Cset} \f$
is said to be in <EM>elementary closed form</EM> if it is,
<EM>syntactically</EM>, a linear combination of a fixed number, \f$ r \f$,
say, of products of polynomials in \f$ \Cset[n] \f$ and (complex)
exponentials.
The number \f$ r \f$ must be an absolute constant, that is, it must be
independent of all variables and parameters of the problem.
As an example, the left hand side of the identity
\f[
  \sum_{k=0}^n \binom nk
  =
  2^n
\f]
is not in closed form, while the right hand side is.

Generally speaking, we focus on effectively computable methods
that can constitute the basis of practical, efficient algorithms.
As a consequence, very often we refer to <EM>syntax</EM>
instead of <EM>semantics</EM>.
Moreover, in an attempt to keep the discussion more fluid,
we do that implicitly.
Thus, when we say ``\f$ p \f$ is a polynomial'' we actually mean
``\f$ p \f$ is an expression that, syntactically, is a polynomial''
or
``\f$ p \f$ is, syntactically, of the form
  \f$ a_0\lambda^k + a_1\lambda^{k-1} + \cdots + a_{k-1}\lambda + a_k \f$
  where \f$ \dots \f$''.

We prefer to use the term ``recurrence relations,'' but in the
literature it is also possible to encounter the term
<EM>difference equations</EM>.
The latter is mainly used in a mathematical context, in order to give
prominence to the tie with the differential equations.
In fact, difference equations can be considered the discrete analogue
of differential equations, and there exists a collection of
mathematical tools, called <EM>difference calculus</EM>, which is quite
similar to <EM>differential calculus</EM>.



\section introduction An Introduction to Recurrence Relation

<B>Recurrence relation</B>

Given a sequence \f$ (x_n)_{n \in \Nset} \f$ of complex numbers, we say
that it satisfies the <EM>recurrence relation</EM> (or, more briefly,
the <EM>recurrence</EM>) \f$ F_n \f$ if
\f[
  F_n(n, x_n, x_{n-1}, \dots, x_1, x_0) = 0.
\f]
Note that, in general, we allow \f$ F_n \f$ to depend on \f$ n \f$:
in the definition above, in fact, its arity is \f$ n+2 \f$.
Here we want to include the possibility that, say,
\f$ F_n(n, x_n, x_{n-1}, \dots, x_1, x_0) = \sum_{k=0}^n x_k \f$.

\anchor normal_form
<B>Normal form of a recurrence</B>

We say that the recurrence \f$ F_n \f$ is in its <EM>normal form</EM>
if there exists a function \f$ G_n \f$ such that
\f[
  F_n(n, x_n, x_{n-1}, \dots, x_1, x_0)
  =
  x_n - G_n(n, x_{n-1}, \dots, x_1, x_0).
\f]
In this case, we also call normal form of the recurrence the equivalent
statement
\f[
  x_n
  =
  G_n(n, x_{n-1}, \dots, x_1, x_0).
\f]

\anchor order
<B>Order of a recurrence</B>

If there exists a <EM>fixed</EM> positive integer \f$ k \f$ and a function
\f$ H_n \f$ of arity \f$ k+1 \f$ such that for \f$ n \ge k \f$
\f[
  G_n(n, x_{n-1}, \dots, x_1, x_0)
  =
  H_n(n, x_{n-1}, \dots, x_{n-k}),
\f]
we say that the recurrence in normal form has <EM>order</EM> (at most)
\f$ k \f$.
We take the <EM>smallest</EM> possible value of \f$ k \f$ as the order
of the recurrence.
If no such \f$ k \f$ exists, then we say that the recurrence has
<EM>infinite order</EM>.

\anchor initial_conditions
<B>Initial conditions</B>

The order of a recurrence, if finite, suggests the number of necessary
<EM>initial conditions</EM> in order to uniquely identify the
recurrence.
In the case of infinite order recurrence the number of initial conditions
depend by the form of the recurrence (see SECTION INFINITE_ORDER_REC).
We denote with \f$ x(k) \f$, with \f$ k \in \Nset \f$,
<EM>symbolic initial conditions</EM>, i.e. initial condition not still
defined by the user.

In the following section we will consider the different types of
recurrences that the system is able to deal.


\section linear_finite_order_const_coeff Linear Recurrences of Finite Order with Constant Coefficients

A <EM>linear recurrence of finite order with constant coefficients</EM>
is a recurrence of the form
\f[
   x_n
   =
   a_1 x_{n-1} + a_2 x_{n-2} + \cdots + a_k x_{n-k} + p(n),
\f]
for \f$ n \geq k \f$, where \f$ k \f$ is a fixed positive integer that
is called <EM>order of the recurrence relation</EM>.
We implicitly assume that \f$ a_k \neq 0 \f$, for otherwise the order
would be smaller.
The <EM>coefficients</EM> \f$a_j\f$ are real or complex numbers.
The function \f$ p \f$ is defined on \f$ \Nset \cap [k, +\infty) \f$,
and is the <EM>non-homogeneous part</EM> of the recurrence.
If \f$ p \doteq 0 \f$ (that is, \f$ p \f$ vanishes identically from a
syntactical point of view), we say that the recurrence is
<EM>homogeneous</EM>.
Every recurrence is given with a set of \f$ k \f$
<EM>initial conditions</EM> \f$ x_0 \f$, \f$ x_1 \f$, \f$ \dots \f$,
\f$ x_{k-1} \f$, which we assume to be known.

*/
