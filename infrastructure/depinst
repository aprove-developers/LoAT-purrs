#!/bin/bash
# PURRS dependencies installation script.
# Copyright (C) 2001-2008 Roberto Bagnara <bagnara@cs.unipr.it>
#
# This file is part of the Parma University's Recurrence Relation
# Solver (PURRS).
# 
# PURRS is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The PURRS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
# USA.
# 
# For the most up-to-date information see the PURRS site:
# http://www.cs.unipr.it/purrs/ .
#
# This script compiles and install the PURRS dependencies. It can be
# used to set up the PURRS infrastructure.
# Known limitations:
# * Some libraries require packaging changes
# In order to run the script you need:
# - A GCC compiler, or a properly configured snapshot 
#   (say, --prefix=/usr/local/gcctest --with-local-prefix=/usr/local/gcctest)
# - A package repository with all the PURRS dependencies in bzip2/gz format.
#    You can get most of the needed files via anonymous FTP from
#    ftp://ftp.cs.unipr.it/pub/infrastructure/.

# General Options
#
# Directory containing tarballs.
REPOSITORY="$HOME/purrs-infrastructure"
# Base path to the GCC you want to use. Set to /path to use /path/bin/gcc.
GCC_BASE="/usr"
# Base path where the libraries will be installed.
LIB_BASE="/usr/local"
# Libraries to be installed. Set the right version below.
INSTALL_LIST="GMP CLN GINAC NTL GIAC CGICC"
# Set to yes if you also want to download/compile/check PURRS.
TEST_PURRS="yes"
# Log file.
TODAY=`date +%Y-%m-%d`
INST_LOG=/tmp/purrs_dep_inst_$TODAY.log

# Library versions.
# Assumption: LIB-VER.tar.[bz2|gz] expands to LIB-VER/
# Repackage the few libraries that don't; the ones available via FTP
# have already been repackaged when needed.
GMP=gmp-4.1.4
CLN=cln-1.1.11
GINAC=ginac-1.3.3
NTL=ntl-5.3.2
GIAC=giac-0.4.0-ap3
CGICC=cgicc-3.2.3

###     Your shouldn't need to edit anything below this line.     ###

CONFIGURE_DEFAULT_OPTIONS="--prefix=$LIB_BASE"
export LD_LIBRARY_PATH=$LIB_BASE:$LIB_BASE/lib:$LD_LIBRARY_PATH:$GCC_BASE:$GCC_BASE/lib:
export PATH=$LIB_BASE/bin:$GCC_BASE/bin:$PATH

# Some libraries have naive configuration conventions. Insert here
# any commands to be executed before running configure.
# Configure will be run as ./configure in this case.
PRE_CONF_NTL="cd ../$NTL/src"
PRE_CONF_GIAC="cd ../$GIAC"

# Some specific configure options for libraries that don't use defaults.
OPT_GMP="$CONFIGURE_DEFAULT_OPTIONS --enable-cxx"
OPT_NTL="NTL_GMP_LIP=on NTL_STD_CXX=on GMP_PREFIX=$LIB_BASE PREFIX=$LIB_BASE"
OPT_CGICC="$CONFIGURE_DEFAULT_OPTIONS --enable-namespaces"
OPT_GIAC="$CONFIGURE_DEFAULT_OPTIONS --disable-debug --disable-gc --without-x --disable-gui --disable-pari --disable-gsl --disable-fltk"

# Function to check if required dependencies are installed.
could_not_find()
{
 PROGRAM=`which $1 2>&1 | grep -v "no $1"`
 test -n "$PROGRAM" &&
  { 
    test -x "$PROGRAM" && return 0 
  }
  return 1
}

# It will be set to 1 if we need further confirmation from the user.
ASK_CONTINUE=0

# Check that the user can write in the destination path.
if [ ! -w $LIB_BASE ]; then
  echo "*** You need write permissions in the destination directory $LIB_BASE."
  ASK_CONTINUE=1
fi

# Check that the specified gcc actually exists.
if [ ! -x $GCC_BASE/bin/gcc ]; then
  echo "*** The chosen compiler $GCC_BASE/bin/gcc does not exist."
  ASK_CONTINUE=1
fi

DEPENDENCIES="flex bison"
if [ $( id -u ) -eq 0 ]; then
  DEPENDENCIES="$DEPENDENCIES ldconfig"
fi

for DEPENDENCY in $DEPENDENCIES; do
  could_not_find "$DEPENDENCY" || {
    echo "*** Could not find $DEPENDENCY in your PATH. This is required for installation.";
    ASK_CONTINUE=1
    }
done

if test $ASK_CONTINUE -ne 0; then
  echo -n "Problems were found. Are you sure you want to continue? (y/N): "
  read CONFIRMATION
  echo ""
  if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "yes" ] ; then
    exit 0 ;
  fi
fi

for LIB_SHORT_NAME in $INSTALL_LIST; do
  LIBNAME=${!LIB_SHORT_NAME}
  OPT_PARAM_NAME="OPT_${LIB_SHORT_NAME}"
  OPT_PARAM=${!OPT_PARAM_NAME}
  # Revert to default if no specific options were set.
  if test ${#OPT_PARAM} == 0; 
    then OPT_PARAM=$CONFIGURE_DEFAULT_OPTIONS 
  fi
  PRE_CONF_NAME="PRE_CONF_${LIB_SHORT_NAME}"
  PRE_CONF="${!PRE_CONF_NAME}"
  # If no specific pre-configure options were set, use standard path.
  if test ${#PRE_CONF} == 0; 
    then CONF_PATH="../$LIBNAME" 
    else CONF_PATH="."
  fi
  echo "`date +%Y-%m-%d_%H:%M:%S` Installing $LIB_SHORT_NAME as $LIBNAME" >> $INST_LOG;
  cd $REPOSITORY; 
  if test -e $LIBNAME.tar.bz2;
    then tar jxvf $LIBNAME.tar.bz2;
    else
    if test -e $LIBNAME.tar.gz;
      then tar zxvf $LIBNAME.tar.gz;
      else echo "$LIBNAME.tar.[bz2|gz] not found." >> $INST_LOG;
    fi
  fi
  mkdir obj$LIBNAME;
  cd obj$LIBNAME;
  SUCCESS=0;
  $PRE_CONF \
  && $CONF_PATH/configure $OPT_PARAM \
  &&  make \
  &&  make install \
  &&  if [ $( id -u ) -eq 0 ]; then ldconfig; fi \
  &&  echo "$LIB_SHORT_NAME installed successfully." \
  &&  SUCCESS=1;
  if test $SUCCESS == 1;
    then
    echo "`date +%Y-%m-%d_%H:%M:%S` Installed $LIB_SHORT_NAME as $LIBNAME" >> $INST_LOG;
    else {
      echo -n "Problems installing $LIB_SHORT_NAME. Are you sure you want to continue? (y/N): "
      read CONFIRMATION
      echo ""
      if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "yes" ] ; then
        exit 0 ;
      fi
    }
    fi
done

# Test with a current PURRS snapshot.
if test $TEST_PURRS == "yes";
  then
  cd $REPOSITORY
  mkdir $TODAY
  cd $TODAY
  cvs -d :pserver:anoncvs@cvs.cs.unipr.it:/cvs/purrs -z 9 checkout -P purrs
  cd purrs
  echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
  echo "PATH: $PATH"
  autoreconf
  cd ..
  mkdir objpurrs$TODAY
  cd objpurrs$TODAY
  ../purrs/configure $CONFIGURE_DEFAULT_OPTIONS --with-cln-prefix=$LIB_BASE && make && make check
fi
